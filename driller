#!/usr/bin/env bash -e

function usage() {
  cat <<EOF
USAGE:
  $(basename -- $0) [OPTION] <dir>

OPTIONS:
  --absolute                Provide the absolute path (default).
  --basename                Provide the filename from a path.
  --dirname                 Provide the dirname from a path.
  --scm-root                Find the scm root (git or hg).
  --help                    This help.

EOF
  exit 0
}

function __path_valid() {
  [[ -e $1 ]]
  return $?
}

function __strip_extraneous_slashes() {
  echo $1 | sed -E 's#/+#/#g'
}

function __qualify_dot_dot_slashes() {
  if [[ -d $1 ]]; then
    dir=$1
    file=""
  else
    dir=$(dirname -- $1)
    file=$(basename -- $1)
  fi

  cd ${dir}
  echo $(pwd)/${file}
}

function __add_trailing_slash() {
  if [[ -d $1 ]]; then
    echo $1 | sed -E 's#/?$#/#'   # a single trailing slash on directories.
  else
    echo $1 | sed -E 's#/?$##'    # no trailing slash on files.
  fi
}

function __clean_path() {
  path=$1
  __path_valid ${path} || fatal "Invalid path"
  path=$(__qualify_dot_dot_slashes ${path})
  path=$(__strip_extraneous_slashes ${path})
  path=$(__add_trailing_slash ${path})
  echo ${path}
}

function __dirname() {
  if [[ -d $1 ]]; then
    __clean_path $1
  else
    __clean_path $(dirname -- $1)
  fi
}

function __filename() {
  [[ -e $1 ]] && [[ ! -d $1 ]] || fatal "Path isn't to a file"
  basename -- $(__clean_path $1)
}

function __scm_dir() {
  [[ -d "$1/.hg" || -d "$1/.git" ]] && return 0
}

function scm_root() {
  dir=$(__dirname $1)
  until [[ ${dir} == "/" ]]; do
    __scm_dir ${dir} && __clean_path ${dir} && return 0
    dir="$(__clean_path ${dir}/../)"
  done

  fatal "SCM dir not found"
}

function __debug() {
  __path_valid $1 || fatal "Invalid path"
  echo "PATH_ARG:$1"
  echo "DIR:$(__dirname $1)"

  if [[ -d $1 ]]; then
    echo "FILE:"
  else
    echo "FILE:$(__filename $1)"
  fi

  echo "FLAT_PATH:$(__clean_path $1)"
  exit 0
}

function error() {
  echo "Error: $1" > /dev/stderr
  return 1
}

function fatal() {
  echo "Fatal: $1" > /dev/stderr
  exit 1
}

[[ -z $@ ]] && usage

PATH_ARGS=""
OPTION="--absolute"
for a in "$@"; do
  [[ -e "$a" ]] && PATH_ARGS="${PATH_ARGS} $a"
  [[ "$a" =~ --[a-z]* ]] && OPTION=$a
done

for arg in "$OPTION"; do
  case "${arg}" in
    "--absolute")
      for path in ${PATH_ARGS}; do __clean_path $path; done
      ;;
    "--basename")
      for path in ${PATH_ARGS}; do __filename $path; done
      ;;
    "--debug")
      for path in ${PATH_ARGS}; do __debug $path; done
      ;;
    "--dirname")
      for path in ${PATH_ARGS}; do __dirname $path; done
      ;;
    "--scm-root")
      for path in ${PATH_ARGS}; do scm_root $path; done
      ;;
    "--help")
      usage
      ;;
  esac
done
