#!/bin/bash
function testHelp() {
  ${driller} --help                                         > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "USAGE:"                    "$(head -n1 ${stdout})"
}

function testNoArg() {
  ${driller}                                                > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "USAGE:"                    "$(head -n1 ${stdout})"
}

function testNoOption() {
  ${driller} /tmp/driller/1/                                > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/"           "$(cat ${stdout})"
}

function testAbsoluteSimpleDir() {
  ${driller} --absolute /tmp/driller/1                      > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/"           "$(cat ${stdout})"
}

function testAbsoluteSimpleFile() {
  ${driller} --absolute /tmp/driller/1/1/file               > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/1/file"     "$(cat ${stdout})"
}

function testAbsoluteSimpleFileWithSpaces() {
  ${driller} --absolute /tmp/driller/1/a\ file\ with\ spaces       > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                                     "${status}"
  assertEquals "stdout"         "/tmp/driller/1/a file with spaces"     "$(cat ${stdout})"
}


function testAbsoluteFileLooksLikeSwitch() {
  d=$(pwd)
  pushd /tmp/driller/5/ &> /dev/null
  ${d}/../driller --absolute -file                          > ${stdout} 2> ${stderr}
  popd &> /dev/null
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/5/-file"      "$(cat ${stdout})"
  assertEquals "stderr"         ""                          "$(cat ${stderr})"
}

function testAbsoluteFileLooksLikeHelp() {
  d=$(pwd)
  pushd /tmp/driller/5/ &> /dev/null
  ${d}/../driller --absolute -- --help                         > ${stdout} 2> ${stderr}
  popd &> /dev/null
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/5/--help"     "$(cat ${stdout})"
  assertEquals "stderr"         ""                          "$(cat ${stderr})"
}

function testAbsoluteDeviceFile() {
  ${driller} --absolute /dev/null                           > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/dev/null"                 "$(cat ${stdout})"
}

function testAbsoluteLinkFile() {
  ${driller} --absolute /tmp/driller/4/link                 > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/4/link"       "$(cat ${stdout})"
}

function testAbsoluteSymlinkFile() {
  ${driller} --absolute /tmp/driller/4/symlink              > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/4/symlink"    "$(cat ${stdout})"
}

function testAbsoluteWildcardFileSingle() {
  ${driller} --absolute /tmp/driller/4/fi*                  > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/4/file"       "$(cat ${stdout})"
}

function testAbsoluteWildcardFileMulti() {
  ${driller} --absolute /tmp/driller/4/*                    > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/4/file
/tmp/driller/4/link
/tmp/driller/4/symlink
/tmp/driller/4/symlink_dir"                                 "$(cat ${stdout})"
}

function testAbsoluteComplicatedFile1() {
  ${driller} --absolute /tmp/driller/1/../1/1/file          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/1/file"     "$(cat ${stdout})"
}

function testAbsoluteComplicatedFile2() {
  ${driller} --absolute /tmp/driller/1/../1/a\ file\ with\ spaces       > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                                     "${status}"
  assertEquals "stdout"         "/tmp/driller/1/a file with spaces"     "$(cat ${stdout})"
}

function testAbsoluteComplicatedFile3() {
  ${driller} --absolute "/tmp/driller/1/../1/a file with spaces"        > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                                     "${status}"
  assertEquals "stdout"         "/tmp/driller/1/a file with spaces"     "$(cat ${stdout})"
}

function testScmRootGitSimpleDir() {
  ${driller} --scm /tmp/driller/2/1                         > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/2/"           "$(cat ${stdout})"
}

function testScmRootGitSimpleFile() {
  ${driller} --scm /tmp/driller/2/file                      > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/2/"           "$(cat ${stdout})"
}

function testScmRootHgSimpleDir() {
  ${driller} --scm /tmp/driller/3/1                         > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/3/"           "$(cat ${stdout})"
}

function testScmRootHgSimpleFile() {
  ${driller} --scm /tmp/driller/3/file                      > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/3/"           "$(cat ${stdout})"
  assertEquals "stderr"         ""                          "$(cat ${stderr})"
}

function testScmRootExternalLink() {
  ${driller} --scm /tmp/driller/6/symlink_to_gitfile        > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/2/"           "$(cat ${stdout})"
  assertEquals "stderr"         ""                          "$(cat ${stderr})"
}

function testScmRootHitRoot() {
  ${driller} --scm ${HOME}                                  > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "1"                         "${status}"
  assertEquals "stderr"         "Fatal: SCM dir not found"  "$(cat ${stderr})"
  assertEquals "stdout"         ""                          "$(cat ${stdout})"
}

function testDirnameSimple() {
  ${driller} --dirname /tmp/driller/1/1/file                > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/1/"         "$(cat ${stdout})"
}

function testDirnameRelative() {
  ${driller} --dirname ./                                   > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "${running_dir}/"           "$(cat ${stdout})"
}

function testBasenameSimple() {
  ${driller} --basename /tmp/driller/1/1/file               > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "file"                      "$(cat ${stdout})"
}

function testBasenameRelative() {
  ${driller} --basename ./test                              > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "test"                      "$(cat ${stdout})"
}

function testBasenameWildcardFileSingle() {
  ${driller} --basename /tmp/driller/4/fi*                  > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "file"                      "$(cat ${stdout})"
}

function testBasenameWildcardFileMulti() {
  ${driller} --basename /tmp/driller/4/*                    > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "file
link
symlink"                        "$(cat ${stdout})"
}

function testHomeAbsoluteDir() {
  ${driller} ${HOME}/.driller_tmp          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"               "${status}"
  assertEquals "stdout"         "${HOME}/.driller_tmp/" "$(cat ${stdout})"

  ${driller} ~/.driller_tmp          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"               "${status}"
  assertEquals "stdout"         "${HOME}/.driller_tmp/" "$(cat ${stdout})"
}

function testHomeAbsoluteFile() {
  ${driller} ${HOME}/.driller_tmp/file          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"               "${status}"
  assertEquals "stdout"         "${HOME}/.driller_tmp/file" "$(cat ${stdout})"

  ${driller} ~/.driller_tmp/file          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"               "${status}"
  assertEquals "stdout"         "${HOME}/.driller_tmp/file" "$(cat ${stdout})"
}

function testHomeDereference() {
  ${driller} --dereference ${HOME}/.driller_tmp/symlink          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"               "${status}"
  assertEquals "stdout"         "${HOME}/.driller_tmp/file" "$(cat ${stdout})"

  ${driller} --dereference ~/.driller_tmp/symlink          > ${stdout}
  status=$?
  assertEquals "exit status"    "0"               "${status}"
  assertEquals "stdout"         "${HOME}/.driller_tmp/file" "$(cat ${stdout})"
}

function oneTimeSetUp() {
  running_dir=$(pwd)
  driller="${running_dir}/../driller"
  stdout="/tmp/driller/stdout"
  stderr="/tmp/driller/stderr"
  mkdir -p /tmp/driller/1/1
  touch    /tmp/driller/1/1/file
  touch    "/tmp/driller/1/a file with spaces"
  mkdir -p /tmp/driller/2/1
  mkdir -p /tmp/driller/2/.git
  touch    /tmp/driller/2/file
  mkdir -p /tmp/driller/3/.hg
  mkdir -p /tmp/driller/3/1
  touch    /tmp/driller/3/file
  mkdir -p /tmp/driller/4/
  touch    /tmp/driller/4/file
  ln       /tmp/driller/4/file /tmp/driller/4/link
  mkdir -p /tmp/driller/5/
  touch    /tmp/driller/5/-file
  touch    /tmp/driller/5/--help
  ln -s    /dev/null /tmp/driller/4/symlink
  ln -s    /dev/ /tmp/driller/4/symlink_dir
  mkdir -p /tmp/driller/6
  touch    /tmp/driller/6/file
  ln -s    /dev/null /tmp/driller/6/symlink
  ln -s    /tmp/driller/2/file /tmp/driller/6/symlink_to_gitfile
  ln -s    /tmp/driller/6/symlink /tmp/driller/6/symlink2symlink
  ln -s    /tmp/driller/6/linkloop2 /tmp/driller/6/linkloop1
  ln -s    /tmp/driller/6/linkloop1 /tmp/driller/6/linkloop2

  home_tmp="${HOME}/.driller_tmp"
  mkdir ${home_tmp}
  touch ${home_tmp}/file
  ln -s ${home_tmp}/file ${home_tmp}/symlink
  ln -s ${home_tmp}/file ${HOME}/.driller_tmpfile
}

function oneTimeTearDown() {
  rm -Rf /tmp/driller
  rm -Rf ${home_tmp}
  rm -f ${HOME}/.driller_tmpfile
}

function tearDown() {
  rm -Rf ${stdout} ${stderr}
}

function setUp() {
  cd ${running_dir}
}


# load and run shUnit2
source ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
