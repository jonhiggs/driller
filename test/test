#!/bin/bash
function testHelp() {
  ../driller --help                                         > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "USAGE:"                    "$(head -n1 ${stdout})"
}

function testDebugFile() {
  ../driller --debug /tmp/driller/1/1/../1/file                  > ${stdout}
  assertEquals "path_arg"       "/tmp/driller/1/1/../1/file" "$(grep ^PATH_ARG: ${stdout} | cut -d: -f2)"
  assertEquals "dir"            "/tmp/driller/1/1/"         "$(grep ^DIR: ${stdout} | cut -d: -f2)"
  assertEquals "file"           "file"                      "$(grep ^FILE: ${stdout} | cut -d: -f2)"
  assertEquals "path"           "/tmp/driller/1/1/file"     "$(grep ^PATH: ${stdout} | cut -d: -f2)"
}

function testDebugDir() {
  ../driller --debug /tmp/driller/1/1/../1                  > ${stdout}
  assertEquals "path_arg"       "/tmp/driller/1/1/../1"     "$(grep ^PATH_ARG: ${stdout} | cut -d: -f2)"
  assertEquals "dir"            "/tmp/driller/1/1/"         "$(grep ^DIR: ${stdout} | cut -d: -f2)"
  assertEquals "file"           ""                          "$(grep ^FILE: ${stdout} | cut -d: -f2)"
  assertEquals "path"           "/tmp/driller/1/1/"         "$(grep ^PATH: ${stdout} | cut -d: -f2)"
}

function testDebugNonDir() {
  ../driller --debug /tmp/driller/3/3/../1                  > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "1"                         "${status}"
  assertEquals "stderr"         "Fatal: Invalid path"       "$(cat ${stderr})"
}

function testAbsoluteSimpleDir() {
  ../driller --absolute /tmp/driller/1                      > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/"           "$(cat ${stdout})"
}

function testAbsoluteComplicatedDir() {
  ../driller --absolute /tmp/driller/1/1/../                > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/"           "$(cat ${stdout})"
}

function testAbsoluteWeirdRoot1() {
  ../driller --absolute //..//                              > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/"                         "$(cat ${stdout})"
}

function testAbsoluteWeirdRoot2() {
  ../driller --absolute //////                              > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/"                         "$(cat ${stdout})"
}

function testAbsoluteWeirdRoot3() {
  ../driller --absolute /./..///                            > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/"                         "$(cat ${stdout})"
}

function testAbsoluteSimpleFile() {
  ../driller --absolute /tmp/driller/1/1/file               > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/1/file"     "$(cat ${stdout})"
}

function testAbsoluteComplicatedFile() {
  ../driller --absolute /tmp/driller/1/../1/1/file               > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/1/file"     "$(cat ${stdout})"
}

function testScmRootGitSimpleDir() {
  ../driller --scm-root /tmp/driller/2/1                    > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/2/"           "$(cat ${stdout})"
}

function testScmRootGitSimpleFile() {
  ../driller --scm-root /tmp/driller/2/file                 > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/2/"           "$(cat ${stdout})"
}

function testScmRootHgSimpleDir() {
  ../driller --scm-root /tmp/driller/3/1                    > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/3/"           "$(cat ${stdout})"
}

function testScmRootHgSimpleFile() {
  ../driller --scm-root /tmp/driller/3/file                 > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/3/"           "$(cat ${stdout})"
  assertEquals "stderr"         ""                          "$(cat ${stderr})"
}

function testScmRootHitRoot() {
  ../driller --scm-root ${HOME}                             > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "1"                         "${status}"
  assertEquals "stderr"         "Fatal: SCM dir not found"  "$(cat ${stderr})"
  assertEquals "stdout"         ""                          "$(cat ${stdout})"
}

function testDirnameSimple() {
  ../driller --dirname /tmp/driller/1/1/file                > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "/tmp/driller/1/1/"         "$(cat ${stdout})"
}

function testBasenameSimple() {
  ../driller --basename /tmp/driller/1/1/file               > ${stdout}
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "file"                      "$(cat ${stdout})"
}

function testBasenameNoFile() {
  ../driller --basename /tmp/driller/1/1/                   > ${stdout} 2> ${stderr}
  status=$?
  assertEquals "exit status"    "1"                         "${status}"
  assertEquals "stdout"         ""                          "$(cat ${stdout})"
  assertEquals "stderr"         "Error: Path isn't to a file" "$(cat ${stderr})"
}

function oneTimeSetUp() {
  stdout="/tmp/driller/stdout"
  stderr="/tmp/driller/stderr"
  mkdir -p /tmp/driller/1/1
  touch    /tmp/driller/1/1/file
  mkdir -p /tmp/driller/2/1
  mkdir -p /tmp/driller/2/.git
  touch    /tmp/driller/2/file
  mkdir -p /tmp/driller/3/.hg
  mkdir -p /tmp/driller/3/1
  touch    /tmp/driller/3/file
}

function oneTimeTearDown() {
  rm -Rf /tmp/driller
}

function TearDown() {
  rm -Rf ${stdout} ${stderr}
}

# load and run shUnit2
source ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
